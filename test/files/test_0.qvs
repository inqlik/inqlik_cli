//#!c:\QlikDocs\Polovik_pilot\EtlApps\DataModelDebug1.qvw
InventTableBase:
LOAD ЗначениеСубконто as НоменклатураСсылка,
     КодНоменклатуры as НоменклатураКод, 
     Номенклатура, 
     РодительНоменклатуры as НоменклатураКодУровня,
     Артикул,
     НоменклатурнаяГруппа, 
     ОсновнойПоставщик, 
     ОтветственныйМенеджерЗаПокупки, 
     Услуга, 
     Набор, 
     Классификатор, 
     Rand(Бренд) as НоменклатураБренд, 
     ОтветственныйМенеджерЛауфер, 
     РазделСайтаПоловик, 
     РассылкаКлиентам, 
     НаименованиеПолное, 
     ЕдиницаХраненияОстатков,
     1 as НоменклатураСчетчик    
FROM
[..\Data\Source\Номенклатура.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

CustTable1:
LOAD *,
     Клиент1 as КлиентКодКонсолидированного1;
LOAD *,
     'Клиент ' & AutoNumber(Клиент,'Клиент') as Клиент1
          RESIDENT CustTable;
DROP FIELDS КлиентКод, КлиентКодКонсолидированного;
RENAME FIELD КлиентКод1 TO КлиентКод;
RENAME FIELD КлиентКодКонсолидированного1 TO КлиентКодКонсолидированного;
DROP TABLE CustTable;
RENAME TABLE CustTable1 TO CustTable;
InventTableAndConfig1:
LOAD *,
     'Менеджер ' & AutoNumber(Менеджер,'Менеджер') as Менеджер1
          RESIDENT InventTableAndConfig;
DROP FIELDS Менеджер;
RENAME FIELD Менеджер1 TO Менеджер;
DROP TABLE InventTableAndConfig;
RENAME TABLE InventTableAndConfig1 TO InventTableAndConfig;
Department1:
LOAD *,
     'Город ' & AutoNumber(Подразделение1 ,'Подразделение1') as Подразделение1_1,
     'Магазин ' & AutoNumber(Подразделение2 ,'Подразделение2') as Подразделение2_1
          RESIDENT Department;
DROP FIELDS Подразделение2, Подразделение1;
RENAME FIELD Подразделение1_1 TO Подразделение1;
RENAME FIELD Подразделение2_1 TO Подразделение2;

DROP TABLE Department;
RENAME TABLE Department1 TO Department;

InventTrans1:
LOAD *,
     ПродажиСумма * 0.17 as  ПродажиСумма1,
     ПродажиСуммаБезСкидок * 0.17 as  ПродажиСуммаБезСкидок1,
     ПродажиНДС * 0.17 as  ПродажиНДС1,
     ПродажиСебестоимость * 0.17 as  ПродажиСебестоимость1, 
     ОстаткиСтоимость * 0.17 as  ОстаткиСтоимость1,
     ПродажиВП * 0.17 as  ПродажиВП1,             
     'Кассир ' & AutoNumber(Кассир,'Кассир') as Кассир1
          RESIDENT InventTrans;
DROP FIELDS Кассир, ПродажиСумма, ПродажиСуммаБезСкидок, ПродажиНДС, ПродажиСебестоимость, ОстаткиСтоимость, ПродажиВП;
RENAME FIELD Кассир1 TO Кассир;
RENAME FIELD ПродажиСумма1 TO ПродажиСумма;
RENAME FIELD ПродажиСуммаБезСкидок1 TO ПродажиСуммаБезСкидок;
RENAME FIELD ПродажиНДС1 TO ПродажиНДС;
RENAME FIELD ПродажиСебестоимость1 TO ПродажиСебестоимость;
RENAME FIELD ОстаткиСтоимость1 TO ОстаткиСтоимость;
RENAME FIELD ПродажиВП1 TO ПродажиВП;
DROP TABLE InventTrans;
RENAME TABLE InventTrans1 TO InventTrans;
CustTableBase:
LOAD Ссылка as КлиентСсылка, 
     КодКлиента as КлиентКод, 
     Наименование as Клиент, 
     Родитель as КлиентРодительСсылка, 
     ЮрФизЛицо as КлиентЮрФиз, 
     CRM_ТипОтношений as КлиентТипОтношений,
     ОсновнойМенеджерПокупателя as КлиентМенеджерСсылка,
     If(Собственный = 'ложь','Обычный','Собственный') as КлиентСобственный
FROM
[..\Data\Source\Контрагенты.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

CustGroupCodes:
LOAD DISTINCT КлиентРодительСсылка as КлиентСсылка
     Resident CustTableBase;    

LEFT JOIN(CustTableBase)
LOAD *, 1 as [~КлиентФлагГруппы]
     RESIDENT CustGroupCodes;
DROP TABLE CustGroupCodes;

CustTable:
Noconcatenate
LOAD *
 Resident CustTableBase
     Where IsNull([~КлиентФлагГруппы]);

CustRange:
Hierarchy(КлиентРодительСсылка,КлиентРодительУровняСсылка,КлиентНаименованиеУровня,,КлиентНаименованиеУровня,[Дерево клиентов])
LOAD 
     КлиентСсылка as КлиентРодительСсылка,
     Клиент as КлиентНаименованиеУровня,
     КлиентРодительСсылка as КлиентРодительУровняСсылка
          RESIDENT CustTableBase
               WHERE [~КлиентФлагГруппы] = 1;

DROP TABLE CustTableBase;
LEFT JOIN(CustTable)
LOAD * Resident CustRange;
DROP TABLE CustRange;
Concatenate (CustTable)
LOAD * INLINE [
    КлиентСсылка, КлиентКод, Клиент, КлиентЮрФиз, КлиентТипОтношений, КлиентНаименованиеУровня, КлиентНаименованиеУровня1
    00000000-0000-0000-0000-000000000000, Покупатель, ПокупательПоУмолчанию, Физ. лицо, Покупатель, ЧАСТНЫЕ ЛИЦА, ЧАСТНЫЕ ЛИЦА
];

InventTrans:
Load * From ..\Data\Staged\InventTrans.qvd(qvd);

Call InQlik.GetFieldValues('DateRange','Дата');
SET vMinDate = $(DateRange.Min);
SET vMaxDate = $(DateRange.Max);
SET DateRange=;
Call Calendar($(vMinDate), $(vMaxDate));

/////****************** Традиционная ABC классификация по ВП и Выручке

AbcSumm:
LOAD 
     КлиентСсылка,
     If(Sum(ПродажиВП)>0,Sum(ПродажиВП),0) as [~AbcКлиентПродажиВП],
     If(Sum(ПродажиСумма)>0,Sum(ПродажиСумма),0) as [~AbcКлиентПродажиСумма]
          FROM ..\Data\Staged\InventTrans.qvd(qvd)
////               Where Дата >= $(vMinDate)
                    GROUP BY КлиентСсылка;
LEFT JOIN (AbcSumm)
LOAD 
     Sum([~AbcКлиентПродажиСумма]) as [~AbcКлиентПродажиСуммаВсего],
     Sum([~AbcКлиентПродажиВП]) as [~AbcКлиентПродажиВПВсего]
          RESIDENT AbcSumm;

////****** Расчет ABC По выручке
AbcSum1:
LOAD *,
     RangeSum([~AbcКлиентПродажиСумма],
     Peek('~AbcВыручкаНакопительно')) as [~AbcВыручкаНакопительно]
      Resident AbcSumm
          ORDER BY [~AbcКлиентПродажиСумма] desc;
AbcSum2:
LOAD *, 
     If([~AbcВыручкаНакопительно] <= 0, 'CC',
     If(([~AbcВыручкаНакопительно] / [~AbcКлиентПродажиСуммаВсего]) < 0.8, 'A',
     If(([~AbcВыручкаНакопительно] / [~AbcКлиентПродажиСуммаВсего]) < 0.95, 'B','C'))) as КлиентПродажиАБС
          Resident AbcSum1;      
DROP TABLE AbcSum1;      
LEFT JOIN(AbcSumm) 
LOAD 
     КлиентСсылка, 
     КлиентПродажиАБС
          Resident AbcSum2;
DROP TABLE AbcSum2;    
////****** Расчет ABC по ВП
AbcSum1:
LOAD *,
     RangeSum([~AbcКлиентПродажиВП],
     Peek('~AbcВпНакопительно')) as [~AbcВпНакопительно]
      Resident AbcSumm
          ORDER BY [~AbcКлиентПродажиВП] desc;
AbcSum2:
LOAD *, 
     If([~AbcВпНакопительно] <= 0, 'CC',
     If(([~AbcВпНакопительно] / [~AbcКлиентПродажиВПВсего]) < 0.8, 'A',
     If(([~AbcВпНакопительно] / [~AbcКлиентПродажиВПВсего]) < 0.95, 'B','C'))) as КлиентМаржаАБС
          Resident AbcSum1;      
DROP TABLE AbcSum1;      
LEFT JOIN(AbcSumm) 
LOAD 
     КлиентСсылка, 
     КлиентМаржаАБС
          Resident AbcSum2;
DROP TABLE AbcSum2;  

LEFT JOIN(CustTable)
LOAD * RESIDENT AbcSumm;  
DROP TABLE AbcSumm;

CustTable1:
LOAD *,
     Клиент as КлиентКодКонсолидированного,
     КлиентМаржаАБС as КлиентКосолидированныйМаржаАВС,
     КлиентПродажиАБС as КлиентКосолидированныйПродажиАВС
          Resident CustTable;
DROP TABLE CustTable;
RENAME TABLE CustTable1 TO CustTable;

STORE CustTable INTO ../Data/Staged/CustTable.QVD(QVD);
$(must_include=../Scripts/InQlik.qvs);

//$(must_include=../Scripts/InventLocation.qvs);


//$(must_include=../Scripts/InventtransByDay.qvs);
// // ********  Загрузка планов    
Department: 
LOAD * FROM ../Data/Staged/Department.qvd(qvd);
// InventTrans:
// LOAD * FROM ../Data/Staged/InventTransAllData.qvd(qvd);
Call Calendar(Num(MakeDate(2013,1,1)), Num(MakeDate(2013,12,31)), Num(MakeDate(2013,3,12)));
$(must_include=../Scripts/LoadTurnoverMarker.qvs);


$(must_include=../Scripts/InitLoad.qvs);
$(must_include=../Scripts/InQlik.qvs);
$(must_include=../Scripts/InventTable.qvs);
$(must_include=../Scripts/InventLocation.qvs);

InventTable:
LOAD * FROM ..\Data\Staged\InventTable.QVD (qvd);

InventConfig:
LOAD * FROM ..\Data\Staged\InventConfig.QVD (qvd);

InventLocation:
LOAD * FROM ..\Data\Staged\InventLocation.QVD (qvd);

ConsumerProperty:
LOAD * FROM ..\Data\Staged\ConsumerProperty.QVD (qvd);

InventTrans:
LOAD Num(DayStart(Дата)) as Дата, 
     Номенклатура as НоменклатураСсылка,
     ХарактеристикаНоменклатуры as ХарактеристикаНоменклатурыСсылка,
     Количество * If(ВидДвижения = 'Расход',-1,1) as ПроводкаКоличество, 
     Стоимость * If(ВидДвижения = 'Расход',-1,1) as ПроводкаСтоимость, 
  //  ВидДвижения, 
     Склад as СкладСсылка, 
     КодОперации,
     Регистратор,
     СерияНоменклатуры as СерияНоменклатурыСсылка, 
     ДокументДвижения,
     Dual('ПартииПоТовару',1) as ТипПроводки
FROM
[..\Data\Source\ПартииПоТовару.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

LEFT JOIN (InventTrans)
LOAD СкладСсылка, 
     СкладПодразделениеХраненияСсылка as ПодразделениеСсылка
          RESIDENT InventLocation;

Concatenate (InventTrans)
LOAD Num(Дата) as Дата, 
     Номенклатура as НоменклатураСсылка,
     ХарактеристикаНоменклатуры as ХарактеристикаНоменклатурыСсылка,
     ABCКлассНоменклатуры,
     Dual('1СABCТовар',11) as ТипПроводки
FROM
[..\Data\Source\ABCКлассификацияНоменклатуры.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

Concatenate (InventTrans)
LOAD Num(Дата) as Дата, 
     Номенклатура as НоменклатураСсылка,
     ХарактеристикаНоменклатуры as ХарактеристикаНоменклатурыСсылка,
     If(Классификация = 'По наценке',КлассификаторСсылка) as КлассификаторПоНаценке, 
     If(Классификация = 'По частоте продаж',КлассификаторСсылка) as КлассификаторПоЧастотеПродаж,
     Dual('1СЧастотаНаценка',10) as ТипПроводки
FROM
[..\Data\Source\КлассификацияНоменклатуры.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

//Загружаем закупки и объединяем их с InventTrans
PurchTrans:
LOAD Num(DayStart(Дата)) as Дата,
     Контрагент as ПоставщикСсылка,
     ДокументЗакупки as ДокументЗакупки,
     Номенклатура as НоменклатураСсылка, 
     Количество as ЗакупкаКоличество, 
     If(ТипДокумента = 'Документ ссылка: Поступление товаров и услуг',СтоимостьЗакупки)  as ЗакупкаСтоимость, 
     If(ТипДокумента = 'Документ ссылка: Поступление доп. расходов',СтоимостьЗакупки)  as ЗакупкаРасходСтоимость, 
     If(ТипДокумента = 'Документ ссылка: ГТД по импорту',СтоимостьЗакупки)  as ЗакупкаТаможняСтоимость, 
     If(ТипДокумента = 'Документ ссылка: Поступление товаров и услуг',НДС) as ЗакупкаНДС,      
     If(ТипДокумента = 'Документ ссылка: Поступление доп. расходов',НДС) as ЗакупкаРасходНДС,   
     If(ТипДокумента = 'Документ ссылка: ГТД по импорту',НДС)  as ЗакупкаТаможняНДС, 
     //Склад as СкладСсылка, 
     ХарактеристикаНоменклатуры as ХарактеристикаНоменклатурыСсылка, 
     Организация as Организация, 
     Ответственный as ОтветственныйЗаЗакупкуСсылка, 
     Подразделение as ПодразделениеСсылка,
     ПоставщикТовара as ПоставщикТовараСсылка,
     Dual('Закупка',3) as ТипПроводки  
FROM
[..\Data\Source\Закупки.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

LEFT JOIN (PurchTrans)
LOAD Ссылка as ОтветственныйЗаЗакупкуСсылка,
     Пользователь as ОтветственныйЗаЗакупку
FROM
[..\Data\Source\Пользователи.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

LEFT JOIN (PurchTrans)
LOAD Ссылка as ПоставщикСсылка,
     Наименование as Поставщик
FROM
[..\Data\Source\Контрагенты.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

LEFT JOIN (PurchTrans)
LOAD Ссылка as ПоставщикТовараСсылка,
     Наименование as ПоставщикТовара
FROM
[..\Data\Source\Контрагенты.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

DROP FIELDS ОтветственныйЗаЗакупкуСсылка, ПоставщикСсылка, ПоставщикТовараСсылка FROM PurchTrans;

Concatenate (InventTrans)
LOAD * RESIDENT PurchTrans;
DROP TABLE PurchTrans;

STORE InventTrans INTO ../Data/Staged/InventTrans.QVD(QVD);

SalesData1:
LOAD Num(DayStart(Дата)) as Дата, 
     Num#(Text(Time(Дата,'HH'))) as Час,
     Num#(Text(Time(Дата,'MM'))) as Минута,
     Регистратор,   
     Номенклатура as НоменклатураСсылка,
     ХарактеристикаНоменклатуры as ХарактеристикаНоменклатурыСсылка,
     Количество as ПродажиКоличество, 
     СтоимостьПродажи as ПродажиСумма,
     НДС as ПродажиНДС,
     СтоимостьБезСкидок as ПродажиСуммаБезСкидок,
     Контрагент as КлиентСсылка,
     Проект as КаналСбыта,
     Подразделение as ПодразделениеСсылка,
     Организация as Организация,
     If(ВидОперации = 'ККМ',Null(),Ответственный)  as ОтветственныйЗаПродажу,
     ДокументПродажи as ДокументПродажи,
     ВидОперации as ВидОперации,
     If(ВидОперации = 'ККМ',Null(),Регистратор) as  [~КодЗаказа],
  //   ЗаказПокупателя as СсылкаЗаказПокупателя,
     1 AS COUNTER,
     If(ТипСкидки = '','без скидки',ТипСкидки) as ТипСкидки,
     Dual('Продажа',2) as ТипПроводки
FROM
[..\Data\Source\Продажи.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);
SalesData:
LOAD Дата,
     Час,
     Минута, 
     Регистратор,
     НоменклатураСсылка,
     ХарактеристикаНоменклатурыСсылка,
     КлиентСсылка,
     КаналСбыта,
     ПодразделениеСсылка,
     Организация,
     ОтветственныйЗаПродажу,
     ДокументПродажи,
     ВидОперации,
     [~КодЗаказа],
     Sum(ПродажиКоличество) as ПродажиКоличество,
     Sum(ПродажиСумма) as ПродажиСумма,
     Sum(ПродажиНДС) as ПродажиНДС,
     Sum(ПродажиСуммаБезСкидок) as ПродажиСуммаБезСкидок,
     ТипСкидки,
     ТипПроводки
        RESIDENT SalesData1
               GROUP BY Дата, 
                    Час,
                    Минута,
                    Регистратор,
                    НоменклатураСсылка,
                    ХарактеристикаНоменклатурыСсылка,
                    КлиентСсылка,
                    КаналСбыта,
                    ПодразделениеСсылка,
                    Организация,
                    ДокументПродажи,
                    [~КодЗаказа],
                    ВидОперации,
                    ОтветственныйЗаПродажу,
                    ТипСкидки,
                    ТипПроводки;
DROP TABLE SalesData1;                       
SalesCost1:
LOAD Num(DayStart(Дата)) as Дата, 
     Регистратор, 
     Номенклатура as НоменклатураСсылка, 
     ХарактеристикаНоменклатуры as ХарактеристикаНоменклатурыСсылка, 
     Количество as ПродажиКоличествоПроверка, 
     Себестоимость as ПродажиСебестоимость
FROM
[..\Data\Source\ПродажиСебестоимость.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

SalesCost:
NoConcatenate
LOAD Дата, 
     Регистратор, 
     НоменклатураСсылка, 
     ХарактеристикаНоменклатурыСсылка, 
     Sum(ПродажиКоличествоПроверка) as ПродажиКоличествоПроверка, 
     Sum(ПродажиСебестоимость) as ПродажиСебестоимость
          RESIDENT SalesCost1
               GROUP BY Дата, 
                          Регистратор, 
                          НоменклатураСсылка, 
                         ХарактеристикаНоменклатурыСсылка;
DROP TABLE SalesCost1;
LEFT JOIN (SalesData)
LOAD * RESIDENT SalesCost;
DROP TABLE SalesCost;

SalesData1:
LOAD *,
     RangeSum(ПродажиСумма, -ПродажиНДС, -ПродажиСебестоимость) as ПродажиВП
          RESIDENT SalesData;
DROP TABLE SalesData;
RENAME TABLE SalesData1 TO SalesData; 
STORE SalesData INTO ../Data/Staged/SalesData.QVD(QVD);
DROP TABLE SalesData;

SalesCostMap:
MAPPING LOAD
     Регистратор & '|' & НоменклатураСсылка & '|' & ХарактеристикаНоменклатурыСсылка,
     iF(IsNull(ПродажиСебестоимость / ПродажиКоличество), 0, ПродажиСебестоимость / ПродажиКоличество) as ПродажиСебестоимостьЗаЕдиницу 
          FROM ../Data/Staged/SalesData.QVD(QVD);
          
SalesTaxMap:
MAPPING LOAD
     Регистратор & '|' & НоменклатураСсылка & '|' & ХарактеристикаНоменклатурыСсылка,
     iF(IsNull(ПродажиНДС / ПродажиКоличество), 0, ПродажиНДС / ПродажиКоличество) as ПродажиНДСЗаЕдиницу 
          FROM ../Data/Staged/SalesData.QVD(QVD);


CheckTrans:
LOAD *,
     RangeSum(ПродажиСумма, -ПродажиНДС, -ПродажиСебестоимость) as ПродажиВП;
LOAD *,
     If(IsNull(ПродажиСебестоимость), ЧекКоличество) as ЧекКоличествоВнеОтчета,
     If(IsNull(ПродажиСебестоимость), ЧекСуммаПродажи) as ЧекСуммаВнеОтчета,
     If(IsNull(ПродажиСебестоимость), 'Вне отчета', 'В отчете') as ЧекОтчет,
     If(IsNull(ПродажиСебестоимость) = 0, ЧекСуммаПродажи) as ПродажиСумма,
     If(IsNull(ПродажиСебестоимость) = 0, ЧекКоличество) as ПродажиКоличество,
     If(IsNull(ПродажиСебестоимость) = 0, ЧекПродажиСуммаБезСкидок) as ПродажиСуммаБезСкидок
     ;
LOAD *,
     ApplyMap('SalesTaxMap',Регистратор & '|' & НоменклатураСсылка & '|' & ХарактеристикаНоменклатурыСсылка,Null()) * ЧекКоличество as ПродажиНДС,
     ApplyMap('SalesCostMap',Регистратор & '|' & НоменклатураСсылка & '|' & ХарактеристикаНоменклатурыСсылка,Null()) * ЧекКоличество as ПродажиСебестоимость;
LOAD Num(DayStart(Дата)) as Дата,
     Num#(Text(Time(Дата,'HH'))) as Час,
     Num#(Text(Time(Дата,'MM'))) as Минута,
     '00000000-0000-0000-0000-000000000000' as КлиентСсылка,
     Номер as [~КодЗаказа],
     Номер as ДокументПродажи,
     'розница' as  КаналСбыта,
     Номенклатура as НоменклатураСсылка, 
     Количество * If(ВидОперации = 'продажа',1,-1) as ЧекКоличество, 
     Сумма * If(ВидОперации = 'продажа',1,-1) as ЧекСуммаПродажи, 
     СтоимостьБезСкидок * If(ВидОперации = 'продажа',1,-1) as ЧекПродажиСуммаБезСкидок, 
     If(СкидкаПроцентРучная <> 0,'ручная скидка',If(СкидкаПроцентАвто <> 0,'авто скидка','без скидки')) as ТипСкидки,
     ДисконтнаяКарта as СсылкаДисконтнаяКарта, 
     Склад as СкладСсылка, 
     ХарактеристикаНоменклатуры as ХарактеристикаНоменклатурыСсылка, 
     КассаККМ as КассаСсылка, 
     Ответственный, 
     Подразделение as ПодразделениеСсылка,
     Рентабельность,
     ОтчетККМ as Регистратор,
     'ККМ ' & ВидОперации as ВидОперации,
     МенеджерПродажи as ОтветственныйЗаПродажу,
     Dual('Чек',4) as ТипПроводки    
FROM
[..\Data\Source\ЧекиККМ.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

/*LEFT JOIN (CheckTrans)
LOAD СсылкаЗаказПокупателя as СсылкаЗаказПокупателя,
     Ответственный as ОтветственныйЗаПродажу
FROM
[..\Data\Source\ЗаказПокупателя.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

LEFT JOIN (CheckTrans)
LOAD СсылкаЗаказПокупателя as СсылкаЗаказПокупателя,
     Ответственный as ОтветственныйЗаПродажу
FROM
[..\Data\Source\СчетНаОплатуПокупателю.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);*/

LEFT JOIN (CheckTrans)
LOAD Ссылка as КассаСсылка, 
     Касса
FROM
[..\Data\Source\КассыККМ.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

LEFT JOIN (CheckTrans)
LOAD Ссылка as Ответственный,
     Пользователь as Кассир
FROM
[..\Data\Source\Пользователи.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

LEFT JOIN (CheckTrans)
LOAD Ссылка as СсылкаДисконтнаяКарта,
     text(КодКарты) as ДККод,
     Наименование as ДКНаименование,
     ПроцентСкидки as ДКПроцентСкидки,
     text(МенеджерДискКарты) as ДКМенеджер
FROM
[..\Data\Source\ДисконтныеКарты.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

STORE CheckTrans INTO ../Data/Staged/CheckTrans.QVD(QVD);

Concatenate (InventTrans)
LOAD * RESIDENT CheckTrans;
Concatenate (InventTrans)
LOAD * 
     FROM ../Data/Staged/SalesData.QVD(QVD)
          WHERE IsNull([~КодЗаказа]) = 0;
// CheckReportData:
// LOAD *,
//      Регистратор & '|' & НоменклатураСсылка & '|' & ХарактеристикаНоменклатурыСсылка as CheckTransKey,
//      RecNo() as НомерПроводки
//  FROM ../Data/Staged/SalesData.qvd (QVD)
//      WHERE IsNull([~КодЗаказа]);
// STORE CheckReportData INTO ../Data/Staged/CheckReportData.QVD (QVD);
// DROP TABLE CheckReportData; 
// CheckTransKey:     
// LOAD 
//      Регистратор & '|' & НоменклатураСсылка & '|' & ХарактеристикаНоменклатурыСсылка as CheckTransKey
//       RESIDENT CheckTrans;
// Concatenate (InventTrans)                
// LOAD *
//      FROM ../Data/Staged/CheckReportData.QVD (QVD)
//                Where NOT Exists(CheckTransKey);
// DROP TABLE CheckTransKey;
DROP TABLE CheckTrans;

LET vCurrentDate = Num(MakeDate(2013,3,12));
Call InQlik.GetFieldValues('DateRange','Дата');
SET vMinDate = $(DateRange.Min);
SET vMaxDate = $(DateRange.Max);
SET DateRange=;

Call Calendar(Num(MakeDate(2013,1,1)), Num(MakeDate(2013,12,31)), $(vCurrentDate));

PlanTrans:
LOAD Distinct Num(DayStart(Дата)) as Дата,
     If(Проект = '','опт',Проект) as КаналСбыта,
     СсылкаМенеджерИлиПодразделение as СсылкаМенеджерИлиПодразделение,
     Выручка as ПланПродажи,
     ВП as ПланВП,
     Наценка as ПланНаценка,
     Dual('План1С',20) as ТипПроводки 
FROM
[..\Data\Source\ПланПродаж.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

LEFT JOIN (PlanTrans)
LOAD Ссылка as СсылкаМенеджерИлиПодразделение,
     Ссылка as ОтветственныйЗаПродажу
FROM
[..\Data\Source\Пользователи.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

LEFT JOIN (PlanTrans)
LOAD Ссылка as СсылкаМенеджерИлиПодразделение,
     Ссылка as ПодразделениеСсылка
FROM
[..\Data\Source\Подразделения.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

DROP FIELD СсылкаМенеджерИлиПодразделение FROM PlanTrans;

Concatenate (InventTrans)
LOAD * RESIDENT PlanTrans;
//WHERE Where Дата <= $(vMaxDate);
DROP TABLE PlanTrans;

LEFT JOIN (InventTrans)
LOAD Ссылка as ОтветственныйЗаПродажу,
     Пользователь as МенеджерПродажи
FROM
[..\Data\Source\Пользователи.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

DROP FIELDS КассаСсылка, Ответственный, ОтветственныйЗаПродажу;

STORE InventTrans INTO ../Data/Staged/InventTrans.QVD(QVD);

InventTable:
LOAD * FROM ..\Data\Staged\InventTable.QVD (qvd);

CustTableBase:
LOAD Ссылка as КлиентСсылка, 
     КодКлиента as КлиентКод, 
     Наименование as Клиент, 
     Родитель as КлиентРодительСсылка, 
     ЮрФизЛицо as КлиентЮрФиз, 
     CRM_ТипОтношений as КлиентТипОтношений,
     ОсновнойМенеджерПокупателя as КлиентМенеджерСсылка,
  //   ТипЦены as ТипЦены,
     If(Собственный = 'ложь','Обычный','Собственный') as КлиентСобственный
FROM
[..\Data\Source\Контрагенты.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

CustGroupCodes:
LOAD DISTINCT КлиентРодительСсылка as КлиентСсылка
     Resident CustTableBase;    

LEFT JOIN(CustTableBase)
LOAD *, 1 as [~КлиентФлагГруппы]
     RESIDENT CustGroupCodes;
DROP TABLE CustGroupCodes;

CustTable:
Noconcatenate
LOAD *
 Resident CustTableBase
     Where IsNull([~КлиентФлагГруппы]);
CustRange:
Hierarchy(КлиентРодительСсылка,КлиентРодительУровняСсылка,КлиентНаименованиеУровня,,КлиентНаименованиеУровня,[Дерево клиентов])
LOAD 
     КлиентСсылка as КлиентРодительСсылка,
     Клиент as КлиентНаименованиеУровня,
     КлиентРодительСсылка as КлиентРодительУровняСсылка
          RESIDENT CustTableBase
               WHERE [~КлиентФлагГруппы] = 1;

DROP TABLE CustTableBase;
LEFT JOIN(CustTable)
LOAD * Resident CustRange;
DROP TABLE CustRange;
Concatenate (CustTable)
LOAD * INLINE [
    КлиентСсылка, КлиентКод, Клиент, КлиентЮрФиз, КлиентТипОтношений, КлиентНаименованиеУровня, КлиентНаименованиеУровня1
    00000000-0000-0000-0000-000000000000, Покупатель, ПокупательПоУмолчанию, Физ. лицо, Покупатель, ЧАСТНЫЕ ЛИЦА, ЧАСТНЫЕ ЛИЦА
];


/////****************** Традиционная ABC классификация по ВП и Выручке

AbcSumm:
LOAD 
     КлиентСсылка,
     If(Sum(ПродажиВП)>0,Sum(ПродажиВП),0) as [~AbcКлиентПродажиВП],
     If(Sum(ПродажиСумма)>0,Sum(ПродажиСумма),0) as [~AbcКлиентПродажиСумма]
          FROM ..\Data\Staged\InventTrans.qvd(qvd)
////               Where Дата >= $(vMinDate)
                    GROUP BY КлиентСсылка;
LEFT JOIN (AbcSumm)
LOAD 
     Sum([~AbcКлиентПродажиСумма]) as [~AbcКлиентПродажиСуммаВсего],
     Sum([~AbcКлиентПродажиВП]) as [~AbcКлиентПродажиВПВсего]
          RESIDENT AbcSumm;

////****** Расчет ABC По выручке
AbcSum1:
LOAD *,
     RangeSum([~AbcКлиентПродажиСумма],
     Peek('~AbcВыручкаНакопительно')) as [~AbcВыручкаНакопительно]
      Resident AbcSumm
          ORDER BY [~AbcКлиентПродажиСумма] desc;
AbcSum2:
LOAD *, 
     If([~AbcВыручкаНакопительно] <= 0, 'CC',
     If(([~AbcВыручкаНакопительно] / [~AbcКлиентПродажиСуммаВсего]) < 0.8, 'A',
     If(([~AbcВыручкаНакопительно] / [~AbcКлиентПродажиСуммаВсего]) < 0.95, 'B','C'))) as КлиентПродажиАБС
          Resident AbcSum1;      
DROP TABLE AbcSum1;      
LEFT JOIN(AbcSumm) 
LOAD 
     КлиентСсылка, 
     КлиентПродажиАБС
          Resident AbcSum2;
DROP TABLE AbcSum2;    
////****** Расчет ABC по ВП
AbcSum1:
LOAD *,
     RangeSum([~AbcКлиентПродажиВП],
     Peek('~AbcВпНакопительно')) as [~AbcВпНакопительно]
      Resident AbcSumm
          ORDER BY [~AbcКлиентПродажиВП] desc;
AbcSum2:
LOAD *, 
     If([~AbcВпНакопительно] <= 0, 'CC',
     If(([~AbcВпНакопительно] / [~AbcКлиентПродажиВПВсего]) < 0.8, 'A',
     If(([~AbcВпНакопительно] / [~AbcКлиентПродажиВПВсего]) < 0.95, 'B','C'))) as КлиентМаржаАБС
          Resident AbcSum1;      
DROP TABLE AbcSum1;      
LEFT JOIN(AbcSumm) 
LOAD 
     КлиентСсылка, 
     КлиентМаржаАБС
          Resident AbcSum2;
DROP TABLE AbcSum2;  

LEFT JOIN(CustTable)
LOAD * RESIDENT AbcSumm;  
DROP TABLE AbcSumm;

CustTable1:
LOAD *,
     Клиент as КлиентКодКонсолидированного,
     КлиентМаржаАБС as КлиентКосолидированныйМаржаАВС,
     КлиентПродажиАБС as КлиентКосолидированныйПродажиАВС
          Resident CustTable;
DROP TABLE CustTable;
RENAME TABLE CustTable1 TO CustTable;

STORE CustTable INTO ../Data/Staged/CustTable.QVD(QVD);

$(must_include=../Scripts/Department.qvs);

Department:
LOAD * FROM ..\Data\Staged\Department.QVD (qvd);

// InventTransAggregated:
// LOAD НоменклатураСсылка,
//      ХарактеристикаНоменклатурыСсылка,
//      ПодразделениеСсылка,
//      СкладСсылка,
//      СерияНоменклатурыСсылка,
//      Дата,
//      Sum(ПроводкаКоличество) as ПроводкаКоличество,
//      Sum(ПроводкаСтоимость) as ПроводкаСтоимость,
//      'Остатки' as ТипПроводки
//           FROM ../Data/Staged/InventTrans.QVD (QVD)
//                GROUP BY  
//                     НоменклатураСсылка,
//                     ХарактеристикаНоменклатурыСсылка,
//                     ПодразделениеСсылка,fwh
//                     СкладСсылка,
//                     СерияНоменклатурыСсылка,
//                     Дата;

// InventTransByDay:
// LOAD *,
//      RangeSum(ПроводкаКоличество,
//      If(НоменклатураСсылка = Peek('НоменклатураСсылка') 
//           and ХарактеристикаНоменклатурыСсылка = Peek('ХарактеристикаНоменклатурыСсылка')
//           and СкладСсылка = Peek('СкладСсылка')
//           and СерияНоменклатурыСсылка = Peek('СерияНоменклатурыСсылка'),
//           Peek('ОстаткиКоличество'),0)) as ОстаткиКоличество,
//      RangeSum(ПроводкаСтоимость,
//      If(НоменклатураСсылка = Peek('НоменклатураСсылка') 
//           and ХарактеристикаНоменклатурыСсылка = Peek('ХарактеристикаНоменклатурыСсылка')
//           and СкладСсылка = Peek('СкладСсылка')
//           and СерияНоменклатурыСсылка = Peek('СерияНоменклатурыСсылка'),
//           Peek('ОстаткиСтоимость'),0)) as ОстаткиСтоимость
//                RESIDENT InventTransAggregated
//                     ORDER BY  НоменклатураСсылка,
//                               ХарактеристикаНоменклатурыСсылка,
//                               ПодразделениеСсылка,
//                               СерияНоменклатурыСсылка,
//                               СкладСсылка,
//                               Дата;
// DROP TABLE InventTransAggregated;
// STORE InventTransByDay INTO ../Data/Staged/InventTransByDay.QVD(qvd);

//грузим цены с историей
PriceTrans:
LOAD if(Дата<$(vMinDate),Num(DayStart($(vMinDate))),Num(DayStart(Дата))) as Дата,
     Номенклатура as НоменклатураСсылка, 
     ХарактеристикаНоменклатуры as ХарактеристикаНоменклатурыСсылка,
     ТипЦен as ТипЦены,
     Цена as ЦенаПрайс//,
     //Регион as Подразделение     
FROM
[..\Data\Source\ЦеныСИсторией.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

// Left join(PriceTrans)
// LOAD ПодразделениеСсылка,
//      Подразделение
//           Resident Department;

//DROP FIELD Подразделение FROM PriceTrans;

STORE PriceTrans INTO ../Data/Staged/PriceTrans.QVD(qvd);

//устанавливаем интервал действия цен
PriceTransInterval:
LOAD 
     НоменклатураСсылка,
     ХарактеристикаНоменклатурыСсылка,
     Дата,
     ТипЦены,
     ЦенаПрайс,
 //    ПодразделениеСсылка,     
     date(If(НоменклатураСсылка = Peek('НоменклатураСсылка') 
          and ХарактеристикаНоменклатурыСсылка = Peek('ХарактеристикаНоменклатурыСсылка') 
          and ТипЦены = Peek('ТипЦены'),
              Peek('Дата') - 1,$(vMaxDate))) as DateTo
      Resident PriceTrans
          ORDER BY
               НоменклатураСсылка,
               ХарактеристикаНоменклатурыСсылка,   
               ТипЦены,
               Дата DESC;

DROP TABLE PriceTrans;

Key:
LOAD Distinct
          НоменклатураСсылка,
          ХарактеристикаНоменклатурыСсылка,
          ТипЦены Resident PriceTransInterval;

//берем начало года + конец месяцев года
Let vCurrentYear = 2013;

DataTable:
LOAD Num(DayStart(monthend($(vMinDate)))) as AsOfDate
  autogenerate 1;

LOAD Num(makedate($(vCurrentYear),1,1)) as AsOfDate
  autogenerate 1;

LOAD addmonths(makedate($(vCurrentYear),1,31),recno()-1,1) as AsOfDate
  autogenerate 2;

LOAD Num($(vMaxDate)) as AsOfDate
  autogenerate 1;  

JOIN (Key)
LOAD * RESIDENT DataTable;

DROP TABLE DataTable;

// добавляем даты, на которые были установлены цены
Concatenate
Key:
LOAD Distinct
          Дата as AsOfDate,
          НоменклатураСсылка,
          ХарактеристикаНоменклатурыСсылка,
          ТипЦены Resident PriceTransInterval;

STORE Key INTO ../Data/Staged/PriceTransDate.QVD(qvd);          

Inner join (PriceTransInterval)
IntervalMatch (AsOfDate,НоменклатураСсылка,ХарактеристикаНоменклатурыСсылка,ТипЦены) 
          LOAD Дата, DateTo,НоменклатураСсылка,
          ХарактеристикаНоменклатурыСсылка,
          ТипЦены RESIDENT PriceTransInterval;

DROP TABLE Key;

//Замена на подразделение хранения
Department2DepartmentRefTemp:
MAPPING LOAD Подразделение2, ПодразделениеСсылка
     FROM C:\QlikDocs\polovik_pilot\Data\Staged\Department.QVD(qvd);

LEFT JOIN (PriceTransInterval)
LOAD ApplyMap('Department2DepartmentRefTemp', ПодразделениеНаименование, 'Ссылка не найдена' ) as ПодразделениеСсылка,
     ТипЦены
FROM
C:\QlikDocs\Polovik_pilot\Data\Source\ЦеныПодразделения.xls
(biff, embedded labels);

STORE PriceTransInterval INTO ../Data/Staged/PriceTransInterval.QVD(qvd);

DROP TABLE PriceTransInterval;

CONCATENATE (InventTrans)
LOAD Num(AsOfDate) as Дата,
     НоменклатураСсылка,
     ХарактеристикаНоменклатурыСсылка,
     ТипЦены,
     ЦенаПрайс,
     ПодразделениеСсылка,
     Dual('ЦенаПрайсовая',5) as ТипПроводки 
          FROM ../Data/Staged/PriceTransInterval.QVD(qvd) 
          WHERE Num(AsOfDate) >= Num(DayStart(makedate($(vCurrentYear),1,1)));

STORE InventTrans INTO ../Data/Staged/InventTransPrice.qvd(qvd);

//LV: а где заполнение?
OnHand:
LOAD * FROM ../Data/Staged/ONHAND_BY_DAYS.QVD(qvd);

CONCATENATE (InventTrans)
LOAD Num(AsOfDate) as Дата,
     НоменклатураСсылка,
     СкладСсылка,
     СерияНоменклатурыСсылка,
     ПодразделениеСсылка,
     ХарактеристикаНоменклатурыСсылка,
     ОстаткиКоличество,
     ОстаткиСтоимость,
     ПроводкаКоличество as СкладскоеДвижениеКоличество,
     Dual('Остатки',6) as ТипПроводки 
     RESIDENT OnHand
     WHERE Num(AsOfDate) <= Num($(vMaxDate)); 

DROP TABLE OnHand;

LEFT JOIN (InventTrans)
LOAD СсылкаСерии as СерияНоменклатурыСсылка, 
     text(Наименование) as СерияНоменклатуры 
FROM
[..\Data\Source\СерииНоменклатуры.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

$(must_include=../Scripts/LoadPlanData.qvs);

InventTrans1:
LOAD *,
     IF(IsNull([~КодЗаказа]) = 0, 1) as [~СчетчикСтрокПродаж],
     IF(IsNull([~КодЗаказа]) = 0, [~НомерПроводки]) as [~НомерСтрокиПродаж]; 
LOAD *,
     RecNo() as [~НомерПроводки],
     AutoNumber([~КодЗаказа],'Заказ') as Заказ,
     If(isNull([~КодЗаказа]) = 0, 1) as [~ФлагЗаказ],  
     AutoNumber(НоменклатураСсылка & '' & ХарактеристикаНоменклатурыСсылка,'КлючНоменклатураХарактеристика') as [~КлючНоменклатураХарактеристика],
     НоменклатураСсылка & '' & ХарактеристикаНоменклатурыСсылка as [~СсылкиНаНоменклатуруИХарактеристику]
          RESIDENT InventTrans;
DROP TABLE InventTrans;     
RENAME TABLE InventTrans1 TO InventTrans;

Concatenate(InventTrans)
LOAD Дата, 
     ПодразделениеСсылка, 
     Sum(ПродажиКоличество)/30 + COUNT(Distinct Заказ)* 4 as Траффик,
     Dual('Трафик',30) as ТипПроводки
          RESIDENT InventTrans
               GROUP BY Дата, ПодразделениеСсылка;

STORE InventTrans INTO ../Data/Staged/InventTransAllData.qvd(qvd);

MaxData:
LOAD Max(Дата) as Дата
     FROM ../Data/Staged/InventTransAllData.qvd(qvd)
          WHERE IsNull(ABCКлассНоменклатуры)=0;

InventClassifier:         
LEFT KEEP(MaxData)
LOAD Дата, 
     ABCКлассНоменклатуры as ABCКлассНоменклатурыТекущий,
     AutoNumber(НоменклатураСсылка & '' & ХарактеристикаНоменклатурыСсылка,'КлючНоменклатураХарактеристика') as [~КлючНоменклатураХарактеристика]
     FROM ../Data/Staged/InventTransAllData.qvd(qvd)
          WHERE IsNull(ABCКлассНоменклатуры)=0;
DROP TABLE MaxData;

MaxData:
LOAD Max(Дата) as Дата
     FROM ../Data/Staged/InventTransAllData.qvd(qvd)
          WHERE IsNull(КлассификаторПоНаценке)=0;

InventClassifier1:       
LEFT KEEP(MaxData)
LOAD Дата, 
     КлассификаторПоНаценке as КлассификаторПоНаценкеТекущий,
     AutoNumber(НоменклатураСсылка & '' & ХарактеристикаНоменклатурыСсылка,'КлючНоменклатураХарактеристика') as [~КлючНоменклатураХарактеристика]
     FROM ../Data/Staged/InventTransAllData.qvd(qvd)
          WHERE IsNull(КлассификаторПоНаценке)=0;
DROP TABLE MaxData;
Concatenate(InventClassifier)
LOAD * RESIDENT InventClassifier1;
DROP TABLE InventClassifier1;

MaxData:
LOAD Max(Дата) as Дата
     FROM ../Data/Staged/InventTransAllData.qvd(qvd)
          WHERE IsNull(КлассификаторПоЧастотеПродаж)=0;

InventClassifier1:       
LEFT KEEP(MaxData)
LOAD Дата, 
     КлассификаторПоЧастотеПродаж as КлассификаторПоЧастотеПродажТекущий,
     AutoNumber(НоменклатураСсылка & '' & ХарактеристикаНоменклатурыСсылка,'КлючНоменклатураХарактеристика') as [~КлючНоменклатураХарактеристика]
     FROM ../Data/Staged/InventTransAllData.qvd(qvd)
          WHERE IsNull(КлассификаторПоЧастотеПродаж)=0;
DROP TABLE MaxData;

Concatenate(InventClassifier)
LOAD * RESIDENT InventClassifier1;
DROP TABLE InventClassifier1;
DROP FIELD Дата FROM InventClassifier;

InventClassifier1:
Noconcatenate
LOAD [~КлючНоменклатураХарактеристика],
     MaxString(ABCКлассНоменклатурыТекущий) as ABCКлассНоменклатурыТекущий,
     MaxString(КлассификаторПоНаценкеТекущий) as КлассификаторПоНаценкеТекущий,
     MaxString(КлассификаторПоЧастотеПродажТекущий) as КлассификаторПоЧастотеПродажТекущий
          RESIDENT InventClassifier
               GROUP BY [~КлючНоменклатураХарактеристика];
DROP TABLE InventClassifier;

InventTableAndConfig:
LOAD DISTINCT НоменклатураСсылка,
              ХарактеристикаНоменклатурыСсылка,
              [~КлючНоменклатураХарактеристика]
                  RESIDENT InventTrans;

LEFT JOIN (InventTableAndConfig)
LOAD * 
     RESIDENT InventTable;
DROP TABLE InventTable;

LEFT JOIN (InventTableAndConfig)
LOAD *
     RESIDENT InventConfig;
DROP TABLE InventConfig;

LEFT JOIN (InventTableAndConfig)
LOAD *
     RESIDENT InventClassifier1;
DROP TABLE InventClassifier1;

InventTableAndConfig1:
LOAD *,
     Номенклатура & ' ' & ХарактеристикаНоменклатуры as Номенклатура_Характеристика,
     If(IsNull(ABCКлассНоменклатурыТекущий)=0 AND ABCКлассНоменклатурыТекущий <> 'D - класс', Dual('Матричный',1), Dual('Нематричный',0)) as МатричныйТовар
          RESIDENT InventTableAndConfig;
DROP TABLE InventTableAndConfig;
RENAME TABLE InventTableAndConfig1 TO InventTableAndConfig;          
DROP FIELDS  НоменклатураСсылка, ХарактеристикаНоменклатурыСсылка
     FROM InventTrans;   
STORE InventTableAndConfig INTO ../Data/Staged/IventTableAndCongig.QVD(QVD);

DepartmentLevel2:
MAPPING LOAD 
ПодразделениеСсылка, Подразделение2
     FROM ../Data/Staged/Department.QVD(QVD);

STORE InventTrans INTO ../Data/Staged/InventTransTemp.QVD(QVD);
DROP TABLE InventTrans; 

$(must_include=../Scripts/InventABC.qvs);
$(must_include=../Scripts/InventXYZ.qvs);
$(must_include=../Scripts/LoadTurnoverMarker.qvs);

Concatenate(InventTrans)
LOAD
     ПодразделениеХранения,
     Дата,
     [~КлючНоменклатураХарактеристика],
     [~НоменклатураКоеффНеликвидности]
FROM ..\Data\Staged\AggregatePlanByDepartmentMonthPlanFact.QVD (qvd);

$(Include=../Scripts/InitLoad.qvs);
$(Include=../Scripts/InQlik.qvs);
$(Include=../Scripts/InventTable.qvs);

InventConfig:
LOAD СсылкаХарактеристика as ХарактеристикаНоменклатурыСсылка, 
     Код as ХарактеристикаНоменклатурыКод, 
     Text(Наименование) as ХарактеристикаНоменклатуры
FROM
[..\Data\Source\ХарактеристикиНоменклатуры.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);
LOAD * INLINE [
    ХарактеристикаНоменклатурыСсылка, ХарактеристикаНоменклатурыКод, ХарактеристикаНоменклатуры
    00000000-0000-0000-0000-000000000000, Неопределено, Неопределено
];
STORE InventConfig INTO ../Data/Staged/InventConfig.qvd(qvd);
InventLocation:
Hierarchy(СкладСсылка,СкладСсылкаНаРодитель,Склад,,Склад,[Дерево складов])
LOAD @1 as СкладСсылка, 
     @2 as СкладКод, 
     @3 as Склад, 
     @4 as СкладСсылкаНаРодитель
FROM
[..\Data\Source\Склады.txt]
(txt, utf8, no labels, delimiter is '\t', msq, header is 1 lines);
STORE InventLocation INTO ../Data/Staged/InventLocation.qvd(qvd);

InventTrans:
LOAD Num(DayStart(Дата)) as Дата, 
     Номенклатура as НоменклатураСсылка,
     ХарактеристикаНоменклатуры as ХарактеристикаНоменклатурыСсылка,
     Количество * If(ВидДвижения = 'Расход',-1,1) as ПроводкаКоличество, 
     Стоимость * If(ВидДвижения = 'Расход',-1,1) as ПроводкаСтоимость, 
     ВидДвижения, 
     Склад as СкладСсылка, 
     КодОперации,
     Регистратор,
     СерияНоменклатуры as СерияНоменклатурыСсылка, 
     ДокументДвижения
FROM
[..\Data\Source\ПартииПоТовару.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

LEFT JOIN (InventTrans)
LOAD ЗначениеСубконто as СкладСсылка, 
     Подразделение as ПодразделениеСсылка
FROM
[..\Data\Source\Склады.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

Concatenate (InventTrans)
LOAD Num(Дата) as Дата, 
     Номенклатура as НоменклатураСсылка,
     ХарактеристикаНоменклатуры as ХарактеристикаНоменклатурыСсылка,
     ABCКлассНоменклатуры
FROM
[..\Data\Source\ABCКлассификацияНоменклатуры.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);
Concatenate (InventTrans)
LOAD Num(Дата) as Дата, 
     Номенклатура as НоменклатураСсылка,
     ХарактеристикаНоменклатуры as ХарактеристикаНоменклатурыСсылка,
     If(Классификация = 'По наценке',КлассификаторСсылка) as КлассификаторПоНаценке, 
     If(Классификация = 'По частоте продаж',КлассификаторСсылка) as КлассификаторПоЧастотеПродаж
FROM
[..\Data\Source\КлассификацияНоменклатуры.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

PlanTrans:
LOAD Num(DayStart(Дата)) as Дата,
     Проект as КаналСбыта,
     СсылкаМенеджерИлиПодразделение as СсылкаМенеджерИлиПодразделение,
     Выручка as ПланПродажи,
     ВП as ПланВП,
     Наценка as ПланНаценка
FROM
[..\Data\Source\ПланПродаж.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

LEFT JOIN (PlanTrans)
LOAD Ссылка as СсылкаМенеджерИлиПодразделение,
     Ссылка as ОтветственныйЗаПродажу
FROM
[..\Data\Source\Пользователи.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

LEFT JOIN (PlanTrans)
LOAD Ссылка as СсылкаМенеджерИлиПодразделение,
     Ссылка as ПодразделениеСсылка
FROM
[..\Data\Source\Подразделения.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

DROP FIELD СсылкаМенеджерИлиПодразделение FROM PlanTrans;

Concatenate (InventTrans)
LOAD * RESIDENT PlanTrans;
DROP TABLE PlanTrans;

SalesData1:
LOAD Num(DayStart(Дата)) as Дата, 
     Num#(Text(Time(Дата,'HH'))) as Час,
     Num#(Text(Time(Дата,'MM'))) as Минута,
     Регистратор,   
     Номенклатура as НоменклатураСсылка,
     ХарактеристикаНоменклатуры as ХарактеристикаНоменклатурыСсылка,
     Количество as ПродажиКоличество, 
     СтоимостьПродажи as ПродажиСумма,
     НДС as ПродажиНДС,
     СтоимостьБезСкидок as ПродажиСуммаБезСкидок,
     Контрагент as КлиентСсылка,
     Проект as КаналСбыта,
     Подразделение as ПодразделениеСсылка,
     Организация as ОрганизацияСсылка,
     If(ВидОперации = 'ККМ',Null(),Ответственный)  as ОтветственныйЗаПродажу,
     ДокументПродажи as ДокументПродажи,
     ВидОперации as ВидОперации,
     If(ВидОперации = 'ККМ',Null(),Регистратор) as  [~КодЗаказа],
  //   ЗаказПокупателя as СсылкаЗаказПокупателя,
     1 AS COUNTER,
     If(ТипСкидки = '','без скидки',ТипСкидки) as ТипСкидки
FROM
[..\Data\Source\Продажи.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);
SalesData:
LOAD Дата,
     Час,
     Минута, 
     Регистратор,
     НоменклатураСсылка,
     ХарактеристикаНоменклатурыСсылка,
     КлиентСсылка,
     КаналСбыта,
     ПодразделениеСсылка,
     ОрганизацияСсылка,
     ОтветственныйЗаПродажу,
     ДокументПродажи,
     ВидОперации,
     [~КодЗаказа],
     Sum(ПродажиКоличество) as ПродажиКоличество,
     Sum(ПродажиСумма) as ПродажиСумма,
     Sum(ПродажиНДС) as ПродажиНДС,
     Sum(ПродажиСуммаБезСкидок) as ПродажиСуммаБезСкидок,
     ТипСкидки
        RESIDENT SalesData1
               GROUP BY Дата, 
                    Час,
                    Минута,
                    Регистратор,
                    НоменклатураСсылка,
                    ХарактеристикаНоменклатурыСсылка,
                    КлиентСсылка,
                    КаналСбыта,
                    ПодразделениеСсылка,
                    ОрганизацияСсылка,
                    ДокументПродажи,
                    [~КодЗаказа],
                    ВидОперации,
                    ОтветственныйЗаПродажу,
                    ТипСкидки;
DROP TABLE SalesData1;                       
SalesCost1:
LOAD Num(DayStart(Дата)) as Дата, 
     Регистратор, 
     Номенклатура as НоменклатураСсылка, 
     ХарактеристикаНоменклатуры as ХарактеристикаНоменклатурыСсылка, 
     Количество as ПродажиКоличествоПроверка, 
     Себестоимость as ПродажиСебестоимость
FROM
[..\Data\Source\ПродажиСебестоимость.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);
SalesCost:
NoConcatenate
LOAD Дата, 
     Регистратор, 
     НоменклатураСсылка, 
     ХарактеристикаНоменклатурыСсылка, 
     Sum(ПродажиКоличествоПроверка) as ПродажиКоличествоПроверка, 
     Sum(ПродажиСебестоимость) as ПродажиСебестоимость
          RESIDENT SalesCost1
               GROUP BY Дата, 
                          Регистратор, 
                          НоменклатураСсылка, 
                         ХарактеристикаНоменклатурыСсылка;
DROP TABLE SalesCost1;
LEFT JOIN (SalesData)
LOAD * RESIDENT SalesCost;
DROP TABLE SalesCost;
SalesData1:
LOAD *,
     RangeSum(ПродажиСумма, -ПродажиНДС, -ПродажиСебестоимость) as ПродажиВП
          RESIDENT SalesData;
DROP TABLE SalesData;
RENAME TABLE SalesData1 TO SalesData; 
STORE SalesData INTO ../Data/Staged/SalesData.QVD(QVD);
DROP TABLE SalesData;

SalesCostMap:
MAPPING LOAD
     Регистратор & '|' & НоменклатураСсылка & '|' & ХарактеристикаНоменклатурыСсылка,
     iF(IsNull(ПродажиСебестоимость / ПродажиКоличество), 0, ПродажиСебестоимость / ПродажиКоличество) as ПродажиСебестоимостьЗаЕдиницу 
          FROM ../Data/Staged/SalesData.QVD(QVD);
SalesTaxMap:
MAPPING LOAD
     Регистратор & '|' & НоменклатураСсылка & '|' & ХарактеристикаНоменклатурыСсылка,
     iF(IsNull(ПродажиНДС / ПродажиКоличество), 0, ПродажиНДС / ПродажиКоличество) as ПродажиНДСЗаЕдиницу 
          FROM ../Data/Staged/SalesData.QVD(QVD);


CheckTrans:
LOAD *,
     If(IsNull(ПродажиСебестоимость), ЧекКоличество) as ЧекКоличествоВнеОтчета,
     If(IsNull(ПродажиСебестоимость), ЧекСуммаПродажи) as ЧекСуммаВнеОтчета,
     If(IsNull(ПродажиСебестоимость), 'Вне отчета', 'В отчете') as ЧекОтчет,
     If(IsNull(ПродажиСебестоимость) = 0, ЧекСуммаПродажи) as ПродажиСумма,
     If(IsNull(ПродажиСебестоимость) = 0, ЧекКоличество) as ПродажиКоличество
     ;
LOAD *,
     ApplyMap('SalesTaxMap',Регистратор & '|' & НоменклатураСсылка & '|' & ХарактеристикаНоменклатурыСсылка,Null()) * ЧекКоличество as ПродажиНДС,
     ApplyMap('SalesCostMap',Регистратор & '|' & НоменклатураСсылка & '|' & ХарактеристикаНоменклатурыСсылка,Null()) * ЧекКоличество as ПродажиСебестоимость;
LOAD Num(DayStart(Дата)) as Дата,
     Num#(Text(Time(Дата,'HH'))) as Час,
     Num#(Text(Time(Дата,'MM'))) as Минута,
     '00000000-0000-0000-0000-000000000000' as КлиентСсылка,
     Номер as [~КодЗаказа],
     Номер as ДокументПродажи,
     'розница' as  КаналСбыта,
     Номенклатура as НоменклатураСсылка, 
     Количество * If(ВидОперации = 'продажа',1,-1) as ЧекКоличество, 
     Сумма * If(ВидОперации = 'продажа',1,-1) as ЧекСуммаПродажи, 
     СтоимостьБезСкидок * If(ВидОперации = 'продажа',1,-1) as ПродажиСуммаБезСкидок, 
     If(СкидкаПроцентРучная <> 0,'ручная скидка',If(СкидкаПроцентАвто <> 0,'авто скидка','без скидки')) as ТипСкидки,
     ДисконтнаяКарта as СсылкаДисконтнаяКарта, 
     Склад as СкладСсылка, 
     ХарактеристикаНоменклатуры as ХарактеристикаНоменклатурыСсылка, 
     КассаККМ as КассаСсылка, 
     Ответственный, 
     Подразделение as ПодразделениеСсылка,
     Рентабельность,
     ОтчетККМ as Регистратор,
     'ККМ ' & ВидОперации as ВидОперации,
     МенеджерПродажи as ОтветственныйЗаПродажу    
FROM
[..\Data\Source\ЧекиККМ.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

/*LEFT JOIN (CheckTrans)
LOAD СсылкаЗаказПокупателя as СсылкаЗаказПокупателя,
     Ответственный as ОтветственныйЗаПродажу
FROM
[..\Data\Source\ЗаказПокупателя.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

LEFT JOIN (CheckTrans)
LOAD СсылкаЗаказПокупателя as СсылкаЗаказПокупателя,
     Ответственный as ОтветственныйЗаПродажу
FROM
[..\Data\Source\СчетНаОплатуПокупателю.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);*/

LEFT JOIN (CheckTrans)
LOAD Ссылка as КассаСсылка, 
     Касса
FROM
[..\Data\Source\КассыККМ.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

LEFT JOIN (CheckTrans)
LOAD Ссылка as Ответственный,
     Пользователь as Кассир
FROM
[..\Data\Source\Пользователи.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

LEFT JOIN (CheckTrans)
LOAD Ссылка as СсылкаДисконтнаяКарта,
     text(КодКарты) as ДККод,
     Наименование as ДКНаименование,
     ПроцентСкидки as ДКПроцентСкидки,
     МенеджерДискКарты as ДКМенеджер
FROM
[..\Data\Source\ДисконтныеКарты.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

STORE CheckTrans INTO ../Data/Staged/CheckTrans.QVD(QVD);

Concatenate (InventTrans)
LOAD * RESIDENT CheckTrans;

Concatenate (InventTrans)
LOAD * 
     FROM ../Data/Staged/SalesData.QVD(QVD)
          WHERE IsNull([~КодЗаказа]) = 0;
// CheckReportData:
// LOAD *,
//      Регистратор & '|' & НоменклатураСсылка & '|' & ХарактеристикаНоменклатурыСсылка as CheckTransKey,
//      RecNo() as НомерПроводки
//  FROM ../Data/Staged/SalesData.qvd (QVD)
//      WHERE IsNull([~КодЗаказа]);
// STORE CheckReportData INTO ../Data/Staged/CheckReportData.QVD (QVD);
// DROP TABLE CheckReportData; 
// CheckTransKey:     
// LOAD 
//      Регистратор & '|' & НоменклатураСсылка & '|' & ХарактеристикаНоменклатурыСсылка as CheckTransKey
//       RESIDENT CheckTrans;
// Concatenate (InventTrans)                
// LOAD *
//      FROM ../Data/Staged/CheckReportData.QVD (QVD)
//                Where NOT Exists(CheckTransKey);
// DROP TABLE CheckTransKey;
DROP TABLE CheckTrans;

LEFT JOIN (InventTrans)
LOAD Ссылка as ОтветственныйЗаПродажу,
     Пользователь as МенеджерПродажи
FROM
[..\Data\Source\Пользователи.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

DROP FIELDS КассаСсылка, Ответственный, ОтветственныйЗаПродажу;

STORE InventTrans INTO ../Data/Staged/InventTrans.QVD(QVD);

InventTable:
LOAD * FROM ..\Data\Staged\InventTable.QVD (qvd);

CustTableBase:
LOAD Ссылка as КлиентСсылка, 
     КодКлиента as КлиентКод, 
     Наименование as Клиент, 
     Родитель as КлиентРодительСсылка, 
     ЮрФизЛицо as КлиентЮрФиз, 
     CRM_ТипОтношений as КлиентТипОтношений,
     ОсновнойМенеджерПокупателя as КлиентМенеджерСсылка,
     If(Собственный = 'ложь','Обычный','Собственный') as КлиентСобственный
FROM
[..\Data\Source\Контрагенты.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

CustGroupCodes:
LOAD DISTINCT КлиентРодительСсылка as КлиентСсылка
     Resident CustTableBase;    

LEFT JOIN(CustTableBase)
LOAD *, 1 as [~КлиентФлагГруппы]
     RESIDENT CustGroupCodes;
DROP TABLE CustGroupCodes;

CustTable:
Noconcatenate
LOAD *
 Resident CustTableBase
     Where IsNull([~КлиентФлагГруппы]);
CustRange:
Hierarchy(КлиентРодительСсылка,КлиентРодительУровняСсылка,КлиентНаименованиеУровня,,КлиентНаименованиеУровня,[Дерево клиентов])
LOAD 
     КлиентСсылка as КлиентРодительСсылка,
     Клиент as КлиентНаименованиеУровня,
     КлиентРодительСсылка as КлиентРодительУровняСсылка
          RESIDENT CustTableBase
               WHERE [~КлиентФлагГруппы] = 1;

DROP TABLE CustTableBase;
LEFT JOIN(CustTable)
LOAD * Resident CustRange;
DROP TABLE CustRange;
Concatenate (CustTable)
LOAD * INLINE [
    КлиентСсылка, КлиентКод, Клиент, КлиентЮрФиз, КлиентТипОтношений, КлиентНаименованиеУровня, КлиентНаименованиеУровня1
    00000000-0000-0000-0000-000000000000, Покупатель, ПокупательПоУмолчанию, Физ. лицо, Покупатель, ЧАСТНЫЕ ЛИЦА, ЧАСТНЫЕ ЛИЦА
];
Call InQlik.GetFieldValues('DateRange','Дата');
SET vMinDate = $(DateRange.Min);
SET vMaxDate = $(DateRange.Max);
SET DateRange=;
Call Calendar($(vMinDate), $(vMaxDate));


ConsumerProperty:
LOAD Ссылка as СсылкаСвойство,
     КодСвойстваХарактеристик, 
     Text(СвойстваХарактеристик) as СвойстваХарактеристик
FROM
[..\Data\Source\СвойстваХарактеристик.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

LEFT JOIN (ConsumerProperty)
LOAD СсылкаВладелец as ХарактеристикаНоменклатурыСсылка, 
     СсылкаСвойство, 
     Text(Значение) as СвойстваХарактеристикЗначение 
FROM
[..\Data\Source\ЗначенияСвойств.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);
DROP FIELDS КодСвойстваХарактеристик,СсылкаСвойство;

STORE ConsumerProperty INTO ../Data/Staged/ConsumerProperty.QVD(QVD);

/////****************** Традиционная ABC классификация по ВП и Выручке

AbcSumm:
LOAD 
     КлиентСсылка,
     If(Sum(ПродажиВП)>0,Sum(ПродажиВП),0) as [~AbcКлиентПродажиВП],
     If(Sum(ПродажиСумма)>0,Sum(ПродажиСумма),0) as [~AbcКлиентПродажиСумма]
          FROM ..\Data\Staged\InventTrans.qvd(qvd)
////               Where Дата >= $(vMinDate)
                    GROUP BY КлиентСсылка;
LEFT JOIN (AbcSumm)
LOAD 
     Sum([~AbcКлиентПродажиСумма]) as [~AbcКлиентПродажиСуммаВсего],
     Sum([~AbcКлиентПродажиВП]) as [~AbcКлиентПродажиВПВсего]
          RESIDENT AbcSumm;

////****** Расчет ABC По выручке
AbcSum1:
LOAD *,
     RangeSum([~AbcКлиентПродажиСумма],
     Peek('~AbcВыручкаНакопительно')) as [~AbcВыручкаНакопительно]
      Resident AbcSumm
          ORDER BY [~AbcКлиентПродажиСумма] desc;
AbcSum2:
LOAD *, 
     If([~AbcВыручкаНакопительно] <= 0, 'CC',
     If(([~AbcВыручкаНакопительно] / [~AbcКлиентПродажиСуммаВсего]) < 0.8, 'A',
     If(([~AbcВыручкаНакопительно] / [~AbcКлиентПродажиСуммаВсего]) < 0.95, 'B','C'))) as КлиентПродажиАБС
          Resident AbcSum1;      
DROP TABLE AbcSum1;      
LEFT JOIN(AbcSumm) 
LOAD 
     КлиентСсылка, 
     КлиентПродажиАБС
          Resident AbcSum2;
DROP TABLE AbcSum2;    
////****** Расчет ABC по ВП
AbcSum1:
LOAD *,
     RangeSum([~AbcКлиентПродажиВП],
     Peek('~AbcВпНакопительно')) as [~AbcВпНакопительно]
      Resident AbcSumm
          ORDER BY [~AbcКлиентПродажиВП] desc;
AbcSum2:
LOAD *, 
     If([~AbcВпНакопительно] <= 0, 'CC',
     If(([~AbcВпНакопительно] / [~AbcКлиентПродажиВПВсего]) < 0.8, 'A',
     If(([~AbcВпНакопительно] / [~AbcКлиентПродажиВПВсего]) < 0.95, 'B','C'))) as КлиентМаржаАБС
          Resident AbcSum1;      
DROP TABLE AbcSum1;      
LEFT JOIN(AbcSumm) 
LOAD 
     КлиентСсылка, 
     КлиентМаржаАБС
          Resident AbcSum2;
DROP TABLE AbcSum2;  


LEFT JOIN(CustTable)
LOAD * RESIDENT AbcSumm;  
DROP TABLE AbcSumm;

CustTable1:
LOAD *,
     Клиент as КлиентКодКонсолидированного,
     КлиентМаржаАБС as КлиентКосолидированныйМаржаАВС,
     КлиентПродажиАБС as КлиентКосолидированныйПродажиАВС
          Resident CustTable;
DROP TABLE CustTable;
RENAME TABLE CustTable1 TO CustTable;

STORE CustTable INTO ../Data/Staged/CustTable.QVD(QVD);
Department:
HIERARCHY(ПодразделениеСсылка, ПодразделениеРодитель, Подразделение, ,Подразделение , , )
LOAD Ссылка as ПодразделениеСсылка, 
     Подразделение, 
     Родитель as ПодразделениеРодитель
FROM
[..\Data\Source\Подразделения.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

STORE Department INTO ../Data/Staged/Department.QVD(QVD);


InventTransAggregated:
LOAD НоменклатураСсылка,
     ХарактеристикаНоменклатурыСсылка,
     ПодразделениеСсылка,
     СкладСсылка,
     СерияНоменклатурыСсылка,
     Дата,
     Sum(ПроводкаКоличество) as ПроводкаКоличество,
     Sum(ПроводкаСтоимость) as ПроводкаСтоимость
          FROM ../Data/Staged/InventTrans.QVD (QVD)
               GROUP BY  
                    НоменклатураСсылка,
                    ХарактеристикаНоменклатурыСсылка,
                    ПодразделениеСсылка,
                    СкладСсылка,
                    СерияНоменклатурыСсылка,
                    Дата;

InventTransByDay:
LOAD *,
     RangeSum(ПроводкаКоличество,
     If(НоменклатураСсылка = Peek('НоменклатураСсылка') 
          and ХарактеристикаНоменклатурыСсылка = Peek('ХарактеристикаНоменклатурыСсылка')
          and СкладСсылка = Peek('СкладСсылка')
          and СерияНоменклатурыСсылка = Peek('СерияНоменклатурыСсылка'),
          Peek('ОстаткиКоличество'),0)) as ОстаткиКоличество,
     RangeSum(ПроводкаСтоимость,
     If(НоменклатураСсылка = Peek('НоменклатураСсылка') 
          and ХарактеристикаНоменклатурыСсылка = Peek('ХарактеристикаНоменклатурыСсылка')
          and СкладСсылка = Peek('СкладСсылка')
          and СерияНоменклатурыСсылка = Peek('СерияНоменклатурыСсылка'),
          Peek('ОстаткиСтоимость'),0)) as ОстаткиСтоимость
               RESIDENT InventTransAggregated
                    ORDER BY  НоменклатураСсылка,
                              ХарактеристикаНоменклатурыСсылка,
                              ПодразделениеСсылка,
                              СерияНоменклатурыСсылка,
                              СкладСсылка,
                              Дата;
DROP TABLE InventTransAggregated;
STORE InventTransByDay INTO ../Data/Staged/InventTransByDay.QVD(qvd);
Call InQlik.GetFieldValues('DateRange','Дата');
SET vMinDate = $(DateRange.Min);
SET vMaxDate = $(DateRange.Max);
SET DateRange=;
Interv:
LOAD 
     НоменклатураСсылка,
     ХарактеристикаНоменклатурыСсылка,
     ПодразделениеСсылка,
     СкладСсылка,
     СерияНоменклатурыСсылка,
     Дата,
     ПроводкаКоличество,
     ПроводкаСтоимость,
     ОстаткиКоличество,
     ОстаткиСтоимость,
     date(If(НоменклатураСсылка = Peek('НоменклатураСсылка') 
          and ХарактеристикаНоменклатурыСсылка = Peek('ХарактеристикаНоменклатурыСсылка')
          and СерияНоменклатурыСсылка = Peek('СерияНоменклатурыСсылка')
          and СкладСсылка = Peek('СкладСсылка'),
                    Peek('Дата') - 1,$(vMaxDate))) as DateTo
      Resident InventTransByDay
          ORDER BY
               НоменклатураСсылка,
               ХарактеристикаНоменклатурыСсылка,
               ПодразделениеСсылка,
               СкладСсылка,
               СерияНоменклатурыСсылка,
               Дата DESC;
DROP table InventTransByDay;
STORE Interv INTO ../Data/Staged/ONHAND.QVD(qvd);
DROP TABLE Interv;
OnHand:
LOAD * FROM ../Data/Staged/ONHAND.QVD (qvd)
     WHERE ОстаткиКоличество <> 0;         
Key:
LOAD Distinct
          НоменклатураСсылка,
          ХарактеристикаНоменклатурыСсылка,
          ПодразделениеСсылка,
          СерияНоменклатурыСсылка,
          СкладСсылка Resident OnHand;
JOIN (Key)
LOAD date($(vMinDate)+recno()-1) as AsOfDate
AUTOGENERATE $(vMaxDate)-$(vMinDate)+1;
Inner join (OnHand)
IntervalMatch (AsOfDate,НоменклатураСсылка,ПодразделениеСсылка,СерияНоменклатурыСсылка,СкладСсылка,ХарактеристикаНоменклатурыСсылка) 
          LOAD Дата, DateTo,НоменклатураСсылка,
          ХарактеристикаНоменклатурыСсылка,
          ПодразделениеСсылка,
          СерияНоменклатурыСсылка,
          СкладСсылка RESIDENT OnHand;
DROP TABLE Key;
STORE OnHand INTO ../Data/Staged/ONHAND_BY_DAYS.QVD(qvd);
CONCATENATE (InventTrans)
LOAD Num(AsOfDate) as Дата,
     Дата as DateFrom,
     DateTo,
     НоменклатураСсылка,
     СкладСсылка,
     СерияНоменклатурыСсылка,
     ПодразделениеСсылка,
     ХарактеристикаНоменклатурыСсылка,
     ОстаткиКоличество,
     ОстаткиСтоимость,
     ПроводкаКоличество as СкладскоеДвижениеКоличество
          RESIDENT OnHand; 
DROP TABLE OnHand;
LEFT JOIN (InventTrans)
LOAD СсылкаСерии as СерияНоменклатурыСсылка, 
     text(Наименование) as СерияНоменклатуры 
FROM
[..\Data\Source\СерииНоменклатуры.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

InventTrans1:
LOAD *,
     IF(IsNull([~КодЗаказа]) = 0, 1) as [~СчетчикСтрокПродаж],
     IF(IsNull([~КодЗаказа]) = 0, [~НомерПроводки]) as [~НомерСтрокиПродаж]; 
LOAD *,
     RecNo() as [~НомерПроводки],
     AutoNumber([~КодЗаказа],'Заказ') as Заказ,
     If(isNull([~КодЗаказа]) = 0, 1) as [~ФлагЗаказ],  
     AutoNumber(НоменклатураСсылка & '' & ХарактеристикаНоменклатурыСсылка,'КлючНоменклатураХарактеристика') as [~КлючНоменклатураХарактеристика],
     НоменклатураСсылка & '' & ХарактеристикаНоменклатурыСсылка as [~СсылкиНаНоменклатуруИХарактеристику]
          RESIDENT InventTrans;
DROP TABLE InventTrans;     
RENAME TABLE InventTrans1 TO InventTrans;

Concatenate(InventTrans)
LOAD Дата, 
     ПодразделениеСсылка, 
     Sum(ПродажиКоличество)/30 + COUNT(Distinct Заказ)* 4 as Траффик
          RESIDENT InventTrans
               GROUP BY Дата, ПодразделениеСсылка;
STORE InventTrans INTO ../Data/Staged/InventTransAllData.qvd(qvd);

MaxData:
LOAD Max(Дата) as Дата
     FROM ../Data/Staged/InventTransAllData.qvd(qvd)
          WHERE IsNull(ABCКлассНоменклатуры)=0;

InventClassifier:         
LEFT KEEP(MaxData)
LOAD Дата, 
     ABCКлассНоменклатуры as ABCКлассНоменклатурыТекущий,
     AutoNumber(НоменклатураСсылка & '' & ХарактеристикаНоменклатурыСсылка,'КлючНоменклатураХарактеристика') as [~КлючНоменклатураХарактеристика]
     FROM ../Data/Staged/InventTransAllData.qvd(qvd)
          WHERE IsNull(ABCКлассНоменклатуры)=0;
DROP TABLE MaxData;

MaxData:
LOAD Max(Дата) as Дата
     FROM ../Data/Staged/InventTransAllData.qvd(qvd)
          WHERE IsNull(КлассификаторПоНаценке)=0;

InventClassifier1:       
LEFT KEEP(MaxData)
LOAD Дата, 
     КлассификаторПоНаценке as КлассификаторПоНаценкеТекущий,
     AutoNumber(НоменклатураСсылка & '' & ХарактеристикаНоменклатурыСсылка,'КлючНоменклатураХарактеристика') as [~КлючНоменклатураХарактеристика]
     FROM ../Data/Staged/InventTransAllData.qvd(qvd)
          WHERE IsNull(КлассификаторПоНаценке)=0;
DROP TABLE MaxData;
Concatenate(InventClassifier)
LOAD * RESIDENT InventClassifier1;
DROP TABLE InventClassifier1;

MaxData:
LOAD Max(Дата) as Дата
     FROM ../Data/Staged/InventTransAllData.qvd(qvd)
          WHERE IsNull(КлассификаторПоЧастотеПродаж)=0;

InventClassifier1:       
LEFT KEEP(MaxData)
LOAD Дата, 
     КлассификаторПоЧастотеПродаж as КлассификаторПоЧастотеПродажТекущий,
     AutoNumber(НоменклатураСсылка & '' & ХарактеристикаНоменклатурыСсылка,'КлючНоменклатураХарактеристика') as [~КлючНоменклатураХарактеристика]
     FROM ../Data/Staged/InventTransAllData.qvd(qvd)
          WHERE IsNull(КлассификаторПоЧастотеПродаж)=0;
DROP TABLE MaxData;

Concatenate(InventClassifier)
LOAD * RESIDENT InventClassifier1;
DROP TABLE InventClassifier1;
DROP FIELD Дата FROM InventClassifier;

InventClassifier1:
Noconcatenate
LOAD [~КлючНоменклатураХарактеристика],
     MaxString(ABCКлассНоменклатурыТекущий) as ABCКлассНоменклатурыТекущий,
     MaxString(КлассификаторПоНаценкеТекущий) as КлассификаторПоНаценкеТекущий,
     MaxString(КлассификаторПоЧастотеПродажТекущий) as КлассификаторПоЧастотеПродажТекущий
          RESIDENT InventClassifier
               GROUP BY [~КлючНоменклатураХарактеристика];
DROP TABLE InventClassifier;

InventTableAndConfig:
LOAD DISTINCT НоменклатураСсылка,
              ХарактеристикаНоменклатурыСсылка,
              [~КлючНоменклатураХарактеристика]
                  RESIDENT InventTrans;
LEFT JOIN (InventTableAndConfig)
LOAD * 
     RESIDENT InventTable;
DROP TABLE InventTable;
LEFT JOIN (InventTableAndConfig)
LOAD *
     RESIDENT InventConfig;
DROP TABLE InventConfig;
LEFT JOIN (InventTableAndConfig)
LOAD *
     RESIDENT InventClassifier1;
DROP TABLE InventClassifier1;

InventTableAndConfig1:
LOAD *,
     Номенклатура & ' ' & ХарактеристикаНоменклатуры as Номенклатура_Характеристика,
     If(IsNull(ABCКлассНоменклатурыТекущий)=0 AND ABCКлассНоменклатурыТекущий <> 'D - класс', 1, 0) as МатричныйТовар
          RESIDENT InventTableAndConfig;
DROP TABLE InventTableAndConfig;
RENAME TABLE InventTableAndConfig1 TO InventTableAndConfig;          

STORE InventTableAndConfig INTO ../Data/Staged/IventTableAndCongig.QVD(QVD);
DROP FIELDS  НоменклатураСсылка, ХарактеристикаНоменклатурыСсылка
     FROM InventTrans;   
//#!c:\QlikDocs\Polovik_pilot\EtlApps\DataModelDebug.qvw

DepartmentTypeExt:
MAPPING LOAD
      Подразделение2, 
     ПодразделениеТипДополнительно
FROM
     [..\Data\Source\ТипПодразделенияНастройка.xls] (biff, embedded labels, table is [Лист1$]);


Department:
HIERARCHY(ПодразделениеСсылка, ПодразделениеРодитель, Подразделение, ,Подразделение , , )
LOAD Ссылка as ПодразделениеСсылка, 
     Подразделение, 
     Родитель as ПодразделениеРодитель,
     If(ТорговаяТочка = 'истина','Магазин','Другое') as ПодразделениеТип
FROM
[..\Data\Source\Подразделения.txt]
(txt, utf8, embedded labels, delimiter is '\t', no quotes);

Department1:
LOAD *, If(IsNull(ПодразделениеТипДополнительно),ПодразделениеТип, ПодразделениеТипДополнительно) as ПодразделениеТип1;
LOAD *,
     ApplyMap('DepartmentTypeExt',Подразделение2,Null()) as ПодразделениеТипДополнительно;
LOAD * 
     RESIDENT Department;
DROP Table Department;
DROP FIELD ПодразделениеТип;
DROP FIELD ПодразделениеТипДополнительно;
RENAME FIELD ПодразделениеТип1 TO ПодразделениеТип;
STORE Department1 INTO ../Data/Staged/Department.QVD(QVD);
DROP TABLE Department1;
InventTransAllData:
LOAD *,
     ApplyMap('DepartmentLevel2',ПодразделениеСсылка, 'ПХ неопределено') as ПодразделениеХранения;
LOAD * FROM ../Data/Staged/InventTransTemp.QVD(QVD);

STORE InventTransAllData INTO ../Data/Staged/InventTransAllDataNew.QVD(QVD);
DROP TABLE InventTransAllData;

///****************** Традиционная ABC классификация по ВП и Выручке
InventLevelMap:
MAPPING LOAD
    [~КлючНоменклатураХарактеристика], НоменклатураНаименованиеУровня1
     FROM ../Data/Staged/IventTableAndCongig.QVD(QVD);
InventTransWithInventLevel1:
LOAD *,
     ApplyMap('InventLevelMap',[~КлючНоменклатураХарактеристика],'Уровень не определен') as НоменклатураНаименованиеУровня1
          FROM ../Data/Staged/InventTransAllDataNew.QVD(QVD)
               WHERE IsNull(ПродажиВП)=0 OR IsNull(ПродажиСумма) = 0;

AbcSumm:
LOAD 
     ПодразделениеХранения,
     НоменклатураНаименованиеУровня1,
     [~КлючНоменклатураХарактеристика],
     If(Sum(ПродажиВП)>0,Sum(ПродажиВП),0) as [~AbcНоменклатураПродажиВП],
     If(Sum(ПродажиСумма)>0,Sum(ПродажиСумма),0) as [~AbcНоменклатураПродажиСумма]
          RESIDENT InventTransWithInventLevel1
                    GROUP BY ПодразделениеХранения,
                              НоменклатураНаименованиеУровня1,
                              [~КлючНоменклатураХарактеристика];
DROP TABLE InventTransWithInventLevel1;
LEFT JOIN (AbcSumm)
LOAD 
     Sum([~AbcНоменклатураПродажиСумма]) as [~AbcНоменклатураПродажиСуммаВсего],
     Sum([~AbcНоменклатураПродажиВП]) as [~AbcНоменклатураПродажиВПВсего]
          RESIDENT AbcSumm;

////****** Расчет ABC По выручке
AbcSum1:
LOAD *,
     RangeSum([~AbcНоменклатураПродажиСумма],
     Peek('~AbcВыручкаНакопительно')) as [~AbcВыручкаНакопительно]
      RESIDENT AbcSumm
          ORDER BY [~AbcНоменклатураПродажиСумма] desc;
AbcSum2:
LOAD *, 
     If([~AbcВыручкаНакопительно] <= 0, 'CC',
     If(([~AbcВыручкаНакопительно] / [~AbcНоменклатураПродажиСуммаВсего]) < 0.8, 'A',
     If(([~AbcВыручкаНакопительно] / [~AbcНоменклатураПродажиСуммаВсего]) < 0.95, 'B','C'))) as НоменклатураПродажиАБС
          RESIDENT AbcSum1;      
DROP TABLE AbcSum1;      
LEFT JOIN(AbcSumm) 
LOAD 
     ПодразделениеХранения,
     НоменклатураНаименованиеУровня1,
     [~КлючНоменклатураХарактеристика], 
     НоменклатураПродажиАБС
          RESIDENT AbcSum2;
DROP TABLE AbcSum2;    
////****** Расчет ABC по ВП
AbcSum1:
LOAD *,
     RangeSum([~AbcНоменклатураПродажиВП],
     Peek('~AbcВпНакопительно')) as [~AbcВпНакопительно]
      RESIDENT AbcSumm
          ORDER BY [~AbcНоменклатураПродажиВП] desc;
AbcSum2:
LOAD *, 
     If([~AbcВпНакопительно] <= 0, 'CC',
     If(([~AbcВпНакопительно] / [~AbcНоменклатураПродажиВПВсего]) < 0.8, 'A',
     If(([~AbcВпНакопительно] / [~AbcНоменклатураПродажиВПВсего]) < 0.95, 'B','C'))) as НоменклатураМаржаАБС
          RESIDENT AbcSum1;      
DROP TABLE AbcSum1;      
LEFT JOIN(AbcSumm) 
LOAD 
     ПодразделениеХранения,
     НоменклатураНаименованиеУровня1,
     [~КлючНоменклатураХарактеристика],
     НоменклатураМаржаАБС
          RESIDENT AbcSum2;
DROP TABLE AbcSum2;  
DROP FIELD НоменклатураНаименованиеУровня1 FROM AbcSumm;
STORE AbcSumm INTO ../Data/Staged/InventAbcSumm.QVD(QVD);
DROP TABLE AbcSumm;
